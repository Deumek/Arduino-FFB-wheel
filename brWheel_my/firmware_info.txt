Milos Rankovic, ranenbg@gmail.com
first created 21.11.2018.
last updated 28.01.2022.

This txt file contains details about Arduino wheel firmware capabilities and features:

Arduino boards supported - Leonardo, Micro or Pro Micro (16MHz clock)

firmware	pwm freq	pwm mode	pwm res		steering	brake		throttle	clutch		handbrake	buttons		HAT Switch

ver17x		16KHz*		pwm+-*		500*		16bit	        16bit(LC,a,s)	12bit(a,s)	12bit(a,s)	12bit(a,s)	24(used 16)	1

*fully configurable through RS232 or control panel v2.0
LC - load cell module HX711 24bit for brake, 2 samples runing average, (0-65535, limited by microsoft FFB driver to 16bits max)
a - Arduino analog input, 10bit (0-1023)
s - ADS1105, external ADC, 12bit (0-4095)
**HID supports total of 28 buttons, but only 24 buttons are visible, because 4 buttons are reserved for HAT Switch
firmware is compatible with any thrustmaster wheel rim at 3.3v
be careful! 5V to 3.3V logic level converter is needed from Arduino wheel base board to Thrustmaster wheel rim
first 6 buttons are reserved for recognition of thrustmaster wheel rims
Leonardo, Micro or ProMicro - only up to 2 buttons are available on the main Arduino board (due to no more pins left)
Nano - with external Arduino Nano board acting as button box, up to 16 buttons can be used (button box firmware is inlcuded in separate *.ino file)

Axis readout adjustment (LC, a, s) and auto calibration (on/off) - requires recompiling

Optical encoder: two channels, no pullup resistors required, CPR range which firmware support depends on selected deg of rotation. The limitation is that CPR*deg_rot/360 must be equal or less than 65535. 

USB poll. rate	FFB calc. rate	RS232 refresh	RS232 baud rate		axis update rate	LC update rate		buttons+HAT update rate

500Hz (2ms)	500Hz (2ms)	100Hz (10ms)	115200bit/s		500Hz (2ms)		80Hz (12.5ms)		500Hz (2ms)

Supported FFB effects: constant force, ramp, spring, damper, inertia, friction, sine, triangle, square, sawtoothup, sawtoothdown

FFB mics: all effects are calculated with 16bit; realisticaly calculated damper, inertia and friction; fully working periodic effects;
fully implemented condition and envelope block effects, effect duration, start delay, direction for 2 axis FFB (2nd pwm channel not implemented yet)

Internal FFB effects: auto centering spring, damper, inertia, friction and end stop spring (can be turned on/off through serial interface)

Firmware features: RS232 interface for adjusting all FFB coefitients, LC brake pressure, pedal autocalibration, minimal PWM value, rotation angle, recenter wheel,
recalibrate wheel, recalibrate pedals, wheel version info, truning various desktop effects on/off, turn on/off ffb signal monitor, save ffb config to EEPROM, adjustment of encoder CPR, fully adjustable PWM settings that are stored in EEPROM, FFB clip LED indicator (ligts up gradually from last 10% of FFB signal level)

Control panel: made in Processing 3.5.4, visualises all axis and buttons including serial commands sent and received from Arduino, full adjustment of FFB effect gains, ffb signal monitor, save and load defaults settings from EEPROM, recenter wheel, recalibrate pedals, encoder CPR adjustment, pwm adjustment, COM port cfg via dialog, FFB setting profiles, control panel version v2.0

FFB output: fully configurable PWM settings, PWM frequency (tied to PWM resolution), PWM types (phase correct or fast TOP), PWM modes (pwm+- or pwm+dir), changes require restarting Arduino, analog 2ch external 12bit DAC MCP4725 available (requires recompiling)

Available PWM frequencies: 40kHz, 20kHz, 16kHz, 8kHz, 4kHz, 3.2kHz, 1.6kHz, 976Hz, 800Hz, 488Hz
Available PWM resolutions: 400, 800, 1000, 2000, 4000, 5000, 10000, 16383, 20000, 32767 (for fast TOP)
                           200, 400,  500, 1000, 2000, 2500,  5000,  8191, 10000, 16383 (for phase correct)

	